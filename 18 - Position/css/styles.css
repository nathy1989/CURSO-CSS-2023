/*
Position: esta propiedad nos pemite posicionar los elementos.

Flujo renderizado: por norma general los elementos se dibujan de izquierda a derecha y de arriba abajo. EL punto 0,0 de los elementos, por normal general, es la esquina superior izquierda.

Espacio reservado: es el espacio que tiene un elemento asignado en el navegador.

Elemento posicionado: Esto significa que el elemento tiene la propiedad position con un valor, distinto de "static", que es el valor que tiene esta propiedad por defecto.

Stackin context: contexto de apilamiento. Es el orden en el que se aplicarán las cajas que se superponen, dentro del mismo contenedor.

Al posicionar un elemento se habilitan 5 propiedades que podemos utilizar para mover los elementos en los 3 ejes:
    top-> El elemento se moverá desde la parte superior la distancia que le hayamos indicado.
    right-> El elemento se moverá desde la parte derecha la distancia que le hayamos indicado.
    bottom-> El elemento se moverá desde la parte inferior la distancia que le hayamos indicado.
    left-> El elemento se moverá desde la parte izquierda la distancia que le hayamos indicado.
    z-index-> Nos permite mover el elemento en el contexto de apilamiento (eje z)

    NOTA: Si a un elemento le declaramos la propiedad top y/o left, las propiedades bottom y/o right no funcionarán.

Los posibles valores que le podemos dar a position son:

    Static: Es el valor que tiene por defecto un elemento con este valor el elemento NO ESTÁ POSICIONADO y por lo cual no podremos moverlo.
     
    Relative: El elemento mantendrá su posición y medidas en el flujo de renderizado y mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en el html como punto de referencia.

    Absolute: El elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento padre posicionado como referencia. Si no tiene ninguno, usará el elemento html como punto de referencia.

    Fixed: El elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento html de referencia, y además se quedará fijo en esa posición aunque hagamos scroll.

    Sticky: Es una mezcla de position relative y fixed, con este tipo de posicionamiento los valores top, left, bottom, y right no sirven para mover el elemento, sino para indicarle en qué punto pasará a tener un comportamiento de posicionamiento fixed, hasta llegar a ese punto se comportará como si tuviera relative

    Z-index: es la propiedad que nos permite ordenar los elelementos super puestos para controlar cual se coloca por delante y cuál por
*/

*{
    box-sizing: border-box;
}

body{
    margin:0;
    background-color: #333;
    color:#fff
}

.container{
    width: 200px;
    height: 200px;
    background-color: #555;
    position:relative;
    
}

.box{
    width: 100px;
    height: 100px;
    text-decoration: center;
    color:#333
}

.box-1{
    background-color: lightcoral;
    position:relative;
    left:150px;
    z-index:-1;
}

.box-1-2{
    background-color: aquamarine;
    position: relative;
    left: 150px;
    top:-25px;
    z-index:-2;
}

.box-2{
    background-color: lightgreen;
    position:relative;
    top:50px;
    z-index:20;
}

.box-3{
    background-color: lightseagreen;
    position: relative;
    z-index:10
}


/*STICKY:
body{
    margin: 0;
    background-color: #333;
    color:#fff
}

img{
    width: 100%;
    display:block;
}

.header{
    text-align: center;
    background-color: lightblue;
    color:orangered;
    position:sticky;
    top: 0;
    height: 400px;
}

.menu{
    position: sticky;
    top:0;
}

article{
    outline:3px solid red;
}

.article-title{
    position: sticky;
    top:0;
    background-color: #333;
    margin:0;
}*/

/* POSITION FIXED:
*{
    box-sizing: border-box;
}

body{
    margin:0;
    background-color: #333;
    color: #fff;
    padding-top: 70px;
}

.header{
    text-align: center;
    padding: 25px 0;
    background-color: lightblue;
    color:orangered;
    position:fixed;
    top:0;
    width:100%;
}

.link{
    position:fixed;
    background-color: lightcoral;
    width:200px;
}
*/